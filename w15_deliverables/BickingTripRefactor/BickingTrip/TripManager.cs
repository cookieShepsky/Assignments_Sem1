using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace BickingTrip;

internal class TripManager
{

    private List<Trip> trips;
    public TripManager()
    {
        trips = new List<Trip>();
    }

    public List<Trip> Trips
    {
        get { return trips; }
        private set { trips = value; }
    }

    public bool AddTrip(string destination, double distance, double rating)
    {
        try
        {
            Trip newTrip = new(destination, distance, rating);
            Trips.Add(newTrip);     // Interesting that the property works here! I guess {Trips} calls {get;} > returns List<Trip> trips, which then lets me invoke {.Add()}
            return true;
        }
        catch (Exception) { return false; }
    }

    /// <summary>
    /// Remove the nth occurrence of a trip with identical destinations.
    /// </summary>
    /// <param name="occurrence">The occurrence (number) of the destination that should be targeted. (should be > 1)</param>
    /// <returns> True if removal is successful.</returns>
    public bool RemoveTrip(string destination, int occurrence = 1)
    {
        int index = 0;
        foreach (Trip trip in Trips)
        {
            if (trip.Destination == destination) occurrence--;
            if (occurrence == 0)     // if required occurrence has been reached delete current index from Trips
            {
                RemoveTripAt(index);
                return true;
            }
            index++;
        }
        return false;
    }

    /// <summary>
    /// Remove a trip at a specified index.
    /// </summary>
    public bool RemoveTripAt(int index)
    {
        try 
        { 
            Trips.RemoveAt(index);
            return true; 
        }
        catch (Exception) { return false; }
    }

    /// <summary>
    /// Returns a List of trips containing only the trips that have a certain destination.
    /// </summary>
    public List<Trip> FilterByDestination (string destination)
    {
        List<Trip> filtered = new();                    
        foreach (Trip trip in Trips)
        {
            if (trip.Destination == destination)
            {
                filtered.Add(trip);
            }
        }
        return filtered;    // Everything above this line was generated by intellisense, wow!
    }
}